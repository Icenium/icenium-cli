--[]--

Usage:
    $ appbuilder <command> [command parameters] [--command <options>]

General commands:
    help <command>                  Shows additional information about the commands in this list.
    login                           Logs you in the Telerik Platform.
    logout                          Logs you out from the Telerik Platform.
    user                            Prints information about the currently logged in user.
    feature-usage-tracking          Configures anonymous feature usage tracking.

Project development commands:
    create                          Creates a new project from template.
    sample                          Lists sample apps.
    sample clone                    Clones a selected sample app.
    init                            Initializes an existing project for development.
    build                           Builds the project for a selected target platform and downloads the application package
                                    or produces a QR code for deploying the application package.
    deploy                          Builds and deploys the project to a connected device.
    livesync                        Synchronizes the latest changes in your project to connected devices.
    livesync cloud                  Synchronizes the project with the cloud to enable LiveSync for remote devices.
    debug                           Shows the debug tools to let you debug applications on connected devices.
    simulate                        Runs the current project in the device simulator.
    emulate                         Runs the current project in the selected platform emulator.
    plugin find                     Searches for plugins in the Apache Cordova Plugin Registry by keyword.
    plugin fetch                    Imports an Apache Cordova plugin into your project.
    edit-configuration              Opens a configuration file for editing.
    prop print                      Prints the current project configuration or the value for the selected project property.
    prop add                        Enables more options for the selected project property, if the property accepts multiple values.
    prop set                        Sets the selected project property and overwrites its current value.
    prop remove                     Disables options for the selected project property, if the property accepts multiple values.
    cloud                           Lists all projects associated with your Telerik Platform account.
    cloud export                    Exports a selected project from the cloud and initializes it for development.
    update-kendoui                  Updates or adds Kendo UI Core or Kendo UI Professional to your project.

Device commands:
    device                          Lists all recognized connected devices.
    device log                      Opens the log stream for the selected device.

Certificate management and publishing commands:
    certificate-request             Lists all pending certificate signing requests (.csr).
    certificate-request create      Creates a certificate signing request (.csr) which you can upload in the iOS Dev Center.
    certificate-request remove      Removes a pending certificate signing request (.csr).
    certificate-request download    Downloads a pending certificate signing request (.csr) which you can upload in the iOS Dev Center.
    certificate                     Lists all configured certificates for code signing iOS and Android applications.
    certificate create-self-signed  Creates self-signed certificate for code signing Android applications.
    certificate remove              Removes the selected certificate from the server.
    certificate export              Exports the selected certificate from the server on your file system.
    certificate import              Imports a certificate from your file system to the server.
    provision                       Lists all configured provisioning profiles for code signing iOS applications.
    provision import                Imports a provisioning profile from file.
    provision remove                Removes a registered provisioning profile.
    appstore list                   Lists all applications in iTunes Connect that are in the Waiting for Upload state.
    appstore upload                 Builds the project and uploads the binary to iTunes Connect.
    appmanager upload               Builds the project and uploads the binary to Telerik AppManager.

Global Options:
    --help                Prints help about the selected command.
    --path <Directory>    Specifies the directory that contains the project. If not set, the project is searched for
                          in the current directory and all directories above it.
    --version             Prints the client version.

--[/]--

--[help]--

Usage:
    $ appbuilder help [<Command>]

Lists the available commands or shows information about the selected command.
<Command> is any of the available commands as listed by $ appbuilder help.
--[/]--

--[login]--

Usage:
    $ appbuilder login

Opens a new browser window in which you can provide your login credentials for the Telerik Platform.
After you have authenticated with the Telerik Platform, you can close the browser window and continue your work from the 
command line.

--[/]--

--[logout]--

Usage:
    $ appbuilder logout

Logs you out from the Telerik Platform.
To build, deploy, or synchronize your projects with the cloud, you need to be logged in.

--[/]--

--[create]--
Usage:
    $ appbuilder create [<Command>]

Creates a project for hybrid or native development. You must run the create command with a related command.

<Command> is a related command that extends the create command. You can run the following related commands:
    hybrid - Creates a new project from an Apache Cordova-based template.
    native - Creates a new project from a Telerik NativeScript-based template.
--[/]--

--[create|hybrid]--

Usage:
    $ appbuilder create hybrid <App name> [--template <Template>] [--path <Directory>] [--appid <App ID>]

Creates a new project from an Apache Cordova-based template.
<App name> is the name of the application. The maximum length is 30 characters. You can use only the following characters:
    A-Z, a-z, 0-9, underscore (_), dot (.), hyphen (-) and space ( ).

Options:
    --template <Template> - Sets the source template for the project. You can use the following templates:
        #{templatesService.projectCordovaTemplatesString}. The default value is KendoUI.
    --path - Specifies the directory where you want to create the project, if different from the current directory. 
        The directory must be empty.
    --appid - Sets the application identifier for your app. The application identifier must consist of at least three
        alphanumeric strings, separated by a dot (.). Each string must start with a letter.
        The application identifier corresponds to the Bundle ID for iOS apps and to the package identifier for Android apps.
        If not specified, the application identifier is set to com.telerik.<App name>.

--[/]--

--[create|native]--

Usage:
    $ appbuilder create native <App name> [--template <Template>] [--path <path>] [--appid <App ID>]

Creates a new project from a Telerik NativeScript-based template.
<App name> is the name of the application. The maximum length is 30 characters. You can use only the following characters:
    A-Z, a-z, 0-9, underscore (_), dot (.), hyphen (-) and space ( ).

Options:
    --template <Template> - Sets the source template for the project. You can use the following templates:
        #{templatesService.projectNativeScriptTemplatesString}. The default value is Blank.
    --path - Specifies the path where you want to create the project, if different from the current directory.
        The directory must be empty.

--[/]--

--[sample]--

Usage:
    $ appbuilder sample
    $ appbuilder sample [<Command>]

Lists all available sample apps with name, description, GitHub repository, and clone command. To clone a selected sample app,
run its clone command as listed by $ appbuilder sample.

<Command> is any related command that extends the sample command. You can run the following related commands:
    clone - Clones a selected sample app. 

--[/]--

--[sample|clone]--

Usage:
    $ appbuilder sample clone <Clone ID> [--path <Directory>]
	
Clones the selected sample app from GitHub to your local file system. You can examine and modify the sample code, run it in the simulator, and build and deploy it on your devices. To list all available sample apps with their clone commands, run $ appbuilder sample.
<Clone ID> is the title of the sample app as listed by $ appbuilder sample. If the title consists of two or more strings, separated by a space, you must 
    replace the spaces with hyphens. For example, to clone the Pinch and zoom sample app, run $ appbuilder sample clone pinch-and-zoom. 


Options: 
     --path - Specifies the directory where you want to clone the sample app, if different from the current directory. The directory must be empty.
    If not specified, the Telerik AppBuilder CLI attempts to clone the sample in the current directory.

#{samplesService.getSamplesInformation}
--[/]--

--[init]--

Usage:
    $appbuilder init [<Command>]

Initializes an existing hybrid or native project for development. You must run the init command with a related command.

<Command> is a related command that extends the init command. You can run the following related commands:
    hybrid - Initializes an existing Apache Cordova project for development in the current directory.
    native - Initializes an existing Telerik NativeScript project for development in the current directory.

--[/]--

--[init|hybrid]--

Usage:
    $ appbuilder init hybrid [--appid <App ID>]

Initializes an existing Apache Cordova project for development in the current directory. If the folder contains an existing AppBuilder project (created with
the Telerik AppBuilder extension for Visual Studio or synchronized from GitHub), the project retains the existing project configuration.

Options:
    --appid - Sets the application identifier for your app. The application identifier must consist of at least three
        alphanumeric strings, separated by a dot (.). Each string must start with a letter.
        The application identifier corresponds to the Bundle ID for iOS apps and to the package identifier for Android apps.
        If not specified, the application identifier is set to com.telerik.<current directory name>.

--[/]--

--[init|native]--

Usage:
    $ appbuilder init native [--appid <App ID>]

Initializes an existing Telerik NativeScript project for development in the current directory. If the folder contains an existing AppBuilder project (created with
the Telerik AppBuilder extension for Visual Studio or synchronized from GitHub), the project retains the existing project configuration.

Options:
    --appid - Sets the application identifier for your app. The application identifier must consist of at least three
        alphanumeric strings, separated by a dot (.). Each string must start with a letter.
        The application identifier corresponds to the Bundle ID for iOS apps and to the package identifier for Android apps.
        If not specified, the application identifier is set to com.telerik.<current directory name>.

--[/]--

--[device]--
Usage:
    $ appbuilder device [<Platform>] [--timeout  <Milliseconds>]
    $ appbuilder device [<Command>]

Platform-specific usage:
    $ appbuilder device android
    $ appbuilder device ios

Lists all recognized connected devices with serial number and index, grouped by platform. In this version of the Telerik AppBuilder CLI,
you can connect only iOS and Android devices.

If a connected Android device is not shown in the list, make sure that you have installed the required Android USB drivers on your system
and that USB debugging is enabled on the device.

Options:
   --timeout - Sets the time in milliseconds for the operation to search for connected devices before completing.
      The operation will continue to wait and listen for newly connected devices and will list them
      after the specified time expires. If not set, the default value is 4000.

<Command> is a related command that extends the device command. You can run the following related commands:
    log - Opens the device log stream for a selected connected device.

--[/]--

--[device|log]--
Usage:
    $ appbuilder device log --device <Device ID>

Opens the device log stream for a selected connected device. 
<Device ID> is the device index or identifier as listed by run $ appbuilder device.

To list all connected devices, grouped by platform, run $ appbuilder device.

--[/]--

--[build]--
Usage:
    $ appbuilder build <Platform> [--download] [--companion] [--certificate <Certificate ID>] [--provision <Provision ID>] [--save-to <File Path>] [--no-livesync]

Platform-specific usage:
    $ appbuilder build android [--certificate <Certificate ID>] [--companion] [--download] [--save-to <File Path>] [--no-livesync]
    $ appbuilder build ios [--certificate <Certificate ID>] [--provision <Provision ID>] [--companion] [--download] [--save-to <File Path>] [--no-livesync]
    $ appbuilder build wp8 [--download] [--save-to <File Path>] [--no-livesync]

Builds the project for the target platform and produces an application package or a QR code for deployment.
<Certificate ID> is the index or name of the certificate as listed by $ appbuilder certificate.
<Provision ID> is the index or name of the provisioning profile as listed by $ appbuilder provision.

Options:
    --download - If set, downloads the application package to the root of the project, instead
        of producing a QR code. Set this option if you want to manually deploy the app package later.
        You cannot set both the --companion and --download switches.
        If you want to download the application package to a specified file path, use the --save-to option instead.
    --companion - Produces a QR code for deployment in the Telerik AppBuilder companion app. When deploying to the
        companion app, you do not need to set a certificate or provision.
        In this version of the Telerik AppBuilder CLI, you cannot build for the companion app for Windows Phone 8.
        You cannot set both the --companion and --download switches.
    --certificate - Sets the certificate that you want to use for code signing your iOS or Android app. You can set 
        a certificate by index or name.
        If you build for iOS, unless the --companion switch is set, you must specify a certificate. The certificate
        must match the provisioning profile.
        To list available certificates, run $ appbuilder certificate.
    --provision - Sets the provisioning profile that you want to use for code signing your iOS app. You can set
        a provisioning profile by index or name.
        If you build for iOS, unless the --companion switch is set, you must specify a provisioning profile. The 
        provisioning profile must match the certificate. 
        To list available provisioning profiles, run $ appbuilder provision.
    --no-livesync - If set, disables LiveSync with the three-finger tap and hold gesture.
    --save-to - If set, downloads the application package and saves it to the specified file path,
        instead of the project root. The file path must be complete with file name and extension.
        You do not need to set the --download switch.

When you build for Windows Phone 8 without the --download switch, the Telerik AppBuilder CLI lets you download and install
the Telerik Application Enrollment Token (AET) on your device via QR code. Always make sure that you have
installed the Telerik AET on the device before attempting to scan the QR code for your Windows Phone 8 app package.
If the Telerik AET is not installed on the device, the following error message will appear when you attempt
to install your app: "Before you install this app, you need to add Telerik AD company account".

When you build for Windows Phone 8 without the --download switch, you can deploy the app
package on device only via QR code or by opening the link in the device browser.
You cannot install the app package manually via cable connection.
--[/]--

--[provision]--
Usage:
    $ appbuilder provision [<Provision ID> -v]
    $ appbuilder provision [<Command>] 

Lists all configured provisioning profiles for code signing iOS applications with index and name. When building an app,
you can set the provisioning profile by index or name in the --provision option.
<Provision ID> is the index or identifier of the provisioning profile as listed by $ appbuilder provision.

Options:
    -v, --verbose - Lists the devices included in the selected provisioning profile.

<Command> is a related command that extends the provision command. You can run the following related commands:
    import - Imports a provisioning profile from file.
    remove - Removes a registered provisioning profile.
--[/]--

--[provision|import]--
Usage:
    $ appbuilder provision import <File Path>

Imports the provisioning profile stored in the selected file.
--[/]--

--[provision|remove]--
Usage:
    $ appbuilder provision remove <Provision ID>

Removes the selected provisioning profile.
<Provision ID> is the index or identifier of the provisioning profile as listed by $ appbuilder provision. 
--[/]--

--[livesync]--
Usage:
    $ appbuilder livesync [<Platform>] [--device <Device ID>] [--companion] [--watch]
    $ appbuilder livesync [<Command>]

Platform-specific usages:
    $ appbuilder livesync android [--device <Device ID>] [--companion] [--watch]
    $ appbuilder livesync ios [--device <Device ID>] [--companion] [--watch]

Synchronizes the latest changes in your project to connected devices. In this version of the Telerik AppBuilder CLI,
you cannot synchronize changes to Windows Phone 8 connected devices.
<Device ID> is the device index or identifier as listed by run $ appbuilder device.

Options:
    --watch - If set, when you save changes to the project, changes are automatically synchronized
        to the connected device.
    --device - Specifies the serial number or the index of the connected device to which you want to synchronize changes. 
        To list all connected devices, grouped by platform, run $ appbuilder device.
    --companion - If set, when you save changes to the project, changes are automatically synchronized
        to the Telerik AppBuilder companion app.

<Command> is a related command that extends the livesync command. You can run the following related commands:
    cloud - Synchronizes the project with the cloud to enable LiveSync for remote devices (using the three finger tap and
            hold gesture).
--[/]--

--[livesync|cloud]--
Usage:
    $ appbuilder livesync cloud

Synchronizes the project with the cloud to enable LiveSync via wireless connection (using the three finger tap and hold 
gesture). 

To get the latest changes on device, tap and hold with three fingers on the device screen until the download pop-up
appears. When the download completes, the app refreshes automatically.
--[/]--

--[deploy]--
Usage:
    $ appbuilder deploy <Platform> [--device <Device ID>] [--no-livesync]

Platform-specific usages:
    $ appbuilder deploy android [--device <Device ID>] [--certificate <Certificate ID>]
    $ appbuilder deploy ios [--device <Device ID>] --certificate <Certificate ID> --provision <Provision ID>

Builds the project for the selected platform and deploys it to connected devices. 

In this version of the Telerik AppBuilder CLI, you cannot build and deploy to Windows Phone 8 connected devices. 

In this version of the Telerik AppBuilder CLI, you cannot build and deploy to iOS connected devices on Linux systems.

<Device ID> is the device index or identifier as listed by run $ appbuilder device.
<Certificate ID> is the index or name of the certificate as listed by $ appbuilder certificate.
<Provision ID> is the index or name of the provisioning profile as listed by $ appbuilder provision.

Options:
    --device - Specifies the serial number or the index of the connected device on which you want to deploy the app.
        To list all connected devices, grouped by platform, run $ appbuilder device.
    --certificate - Sets the certificate that you want to use for code signing your iOS or Android app. You can set 
        a certificate by index or name.
        If you build for iOS, you must specify a certificate. The certificate must match the provisioning profile.
        To list available certificates, run $ appbuilder certificate.
    --provision - Sets the provisioning profile that you want to use for code signing your iOS app. You can set a 
        provisioning profile by index or name.
        If you build for iOS, you must specify a provisioning profile. The provisioning profile must match the certificate. 
        To list available provisioning profiles, run $ appbuilder provision.
    --no-livesync - If set, disables LiveSync with the three-finger tap and hold gesture.
--[/]--

--[plugin]--
Usage:
    $ appbuilder plugin [Command]

You must run the plugin command with a related command.

<Command> is a related command that extends the plugin command. You can run the following related commands:
    find - Searches by keyword for plugins in the Apache Cordova Plugin Registry.
    fetch - Imports the selected Apache Cordova plugin into your project. You can specify a plugin by local path,
            URL to a plugin repository, or a name of a plugin published in the Apache Cordova Plugin Registry.
            The plugin must be Plugman-compatible.
--[/]--

--[plugin|find]--
Usage:
    $ appbuilder plugin find [<Keyword> [<Keyword>]*>]

Searches by one or more keywords for plugins in the Apache Cordova Plugin Registry.

--[/]--

--[plugin|fetch]--
Usage:
    $ appbuilder plugin fetch <Name | Path | URL | [<Keyword> [<Keyword>]*>] >

Imports the selected Apache Cordova plugin into your project. You can specify a plugin by local path,
URL to a plugin repository, name or keyword of a plugin published in the Apache Cordova Plugin Registry. 
The plugin must be Plugman-compatible.
--[/]--

--[simulate]--
Usage:
    $ appbuilder simulate [--path <Directory>]
Runs the current project in the device simulator.

In this version of the Telerik AppBuilder CLI, you cannot run the device simulator on Linux systems.

Options:
    --path - Specifies the directory that contains the project. If not specified, the project is searched
                    for in the current directory and all directories above it.

--[/]--

--[emulate]--
Usage:
    $ appbuilder emulate <Command>

You must run the emulate command with a related command.

<Command> is a related command that sets a target platform for the emulate command. You can run the following related commands:
    android - Builds the specified project in the cloud and runs it in the native Android emulator.
    ios - Builds the specified project in the cloud and runs it in the native iOS Simulator.
    wp8 - Builds the specified project in the cloud and runs it in the native emulator from the Windows Phone 8.0 SDK.
--[/]--

--[emulate|android]--
Usage:
    $ appbuilder emulate android [--path <Directory>] [--certificate <Certificate ID>]

Builds the specified project in the cloud and runs it in the native Android emulator.

<Certificate ID> is the index or name of the certificate as listed by $ appbuilder certificate.

Prerequisites:
Before running your app in the Android emulator, verify that your system meets the following requirements.
    * Verify that you are running the Telerik AppBuilder CLI on a Windows, OS X, or Linux system.
    * Verify that you have installed the Android SDK.
    * Verify that you have added the following Android SDK directories to the PATH environment variable:
        platform-tools
        tools

Options:
    --path - Specifies the directory that contains the project. If not specified, the project is searched
            for in the current directory and all directories above it.
    --certificate - Sets the certificate that you want to use for code signing your iOS or Android app. You can set
            a certificate by index or name.
            To list available certificates, run $ appbuilder certificate.

--[/]--

--[emulate|ios]--
Usage:
    $ appbuilder emulate ios [--path <Directory>] [–-certificate <Certificate ID>] [--provision <Provision ID>]

Builds the specified project in the cloud and runs it in the native iOS Simulator.

<Certificate ID> is the index or name of the certificate as listed by $ appbuilder certificate.
<Provision ID> is the index or name of the provisioning profile as listed by $ appbuilder provision.

Prerequisites:
Before running the iOS Simulator, verify that you have met the following requirements.
    You are running the Telerik AppBuilder CLI on OS X.
    You have installed the ios-sim npm package globally. For more information, see https://www.npmjs.org/package/ios-sim.

Options:
    --path - Specifies the directory that contains the project. If not specified, the project is searched
            for in the current directory and all directories above it.
    --certificate - Sets the certificate that you want to use for code signing your iOS or Android app. You can set
            a certificate by index or name.
            If you build for iOS, you must specify a certificate. The certificate must match the provisioning profile.
            To list available certificates, run $ appbuilder certificate.
    --provision - Sets the provisioning profile that you want to use for code signing your iOS app. You can set
            a provisioning profile by index or name.
            If you build for iOS, you must specify a provisioning profile. The provisioning profile must match the certificate.
            To list available provisioning profiles, run $ appbuilder provision.

--[/]--

--[emulate|wp8]--
Usage:
    $ appbuilder emulate wp8 [--path <Directory>]

Builds the specified project in the cloud and runs it in the native emulator from the Windows Phone 8.0 SDK.

Prerequisites:
Before running the Windows Phone 8.0 emulator, verify that your system meets the following requirements.
	You are running the Telerik AppBuilder CLI on Windows 8 Professional or later.
	You have installed the Windows Phone 8.0 SDK.

Options:
    --path - Specifies the directory that contains the project. If not specified, the project is searched
            for in the current directory and all directories above it.

--[/]--

--[debug]--
Usage:
    $ appbuilder debug

Shows the debug tools to let you debug applications on connected devices.

In this version of the Telerik AppBuilder CLI, you cannot run the debug tools on Linux systems.

--[/]--

--[cloud]--
Usage:
    $ appbuilder cloud
    $ appbuilder cloud [<Command>]

Lists all projects associated with your Telerik Platform account.

<Command> is a related command that extends the cloud command. You can run the following related commands:
	export - Exports a selected project from the cloud and initializes it for development in the Telerik AppBuilder CLI.

--[/]--

--[cloud|export]--
Usage:
    $ appbuilder cloud export <Project ID> [--path <Directory>]

Exports one of your projects from the cloud and initializes it for development
in the current directory.
<Project ID> is the index or name of the project as listed by $ appbuilder cloud.

Options:
    --path - Specifies the directory where to export the selected project on your file system. If not set,
                    exports the project in the current directory.

--[/]--

--[update-kendoui]--
Usage:
    $ appbuilder update-kendoui

Lists officially supported Kendo UI Core and Kendo UI Professional versions and downloads and extracts the selected package in the project directory. 

This operation is applicable only to hybrid projects.

--[/]--

--[edit-configuration]--
Usage:
    $ appbuilder edit-configuration <ConfigurationFile>

<ConfigurationFile> is the configuration file that you want to open. You can select a configuration file
    for editing by setting any of the following values.
#{templatesService.configurationFilesString}

--[/]--

--[user]--
Usage:
    $ appbuilder user

Prints information about the currently logged in user, including name, email address, 
subscription plan and license expiration date.
--[/]--

--[certificate]--
Usage:
    $ appbuilder certificate
    $ appbuilder certificate [<Command>]

Lists all configured certificates for code signing iOS and Android applications with index and name. When building an app, you can
set the certificate by index or name in the --certificate option.

<Command> is a related command that extends the certificate command. You can run the following related commands:
    remove - Removes the selected certificate from the server.
    export - Exports the selected certificate from the server on your file system.
    import - Imports a certificate from your file system to the server.
--[/]--

--[certificate|create-self-signed]--
Usage:
    $ appbuilder certificate create-self-signed [<Name> [<Email> [<Country> [<Purpose> [<StartDate> [<EndDate>]]]]]]

Creates a self-signed certificate for code signing Android applications.

Depending on the certificate type, you can install your app for testing or you can publish it in Google Play.
If you want to publish your app in Google Play, verify that the certificate expires after October 22, 2033.

<Purpose> is the type of the certificate that you want to create. You can set the following purposes: Generic or GooglePlay.
<StartDate> and <EndDate> set the validity of the certificate. You must set the start and end date in the
        following format: yyyy-mm-dd. 
        If you want to publish your app in Google Play, verify that the end date is greater than 2033-10-22.

If you do not provide one or more command parameters, the Telerik AppBuilder CLI shows an interactive prompt to let you set the remaining
certificate details.
--[/]--

--[certificate|remove]--
Usage:
    $ appbuilder certificate remove <Certificate ID>

Removes a selected certificate from the server. 
<Certificate ID> is the index or name of the certificate as listed by $ appbuilder certificate.

CAUTION: Deleting a certificate cannot be undone. If you have not backed up the certificate, you will not be able to restore it. You will
    not be able to update any apps that you have signed and published with the certificate.
    To store a copy of the certificate on your local file system, run $ appbuilder certificate export.
--[/]--

--[certificate|export]--
Usage:
    $ appbuilder certificate export <Certificate ID> [<Password>] [--path <Directory>]

Exports a selected certificate from the server as a P12 file. You must set a password for the exported file. If you do not set a password,
Telerik AppBuilder will prompt you to provide a password.
<Certificate ID> is the index or name of the certificate as listed by $ appbuilder certificate.

Options:
    --path - Specifies the directory where to store the exported certificate. If not specified, stores the exported certificate in the current 
            directory.
--[/]--

--[certificate|import]--
Usage:
    $ appbuilder certificate import <File Path> [<Password>]

Imports an existing certificate from a P12 file stored on your local file system. If you do not provide the certificate password when
running the command, the Telerik AppBuilder CLI prompts you to provide it.
--[/]--

--[appstore]--
Usage:
    $ appbuilder appstore <Command>

You must run the appstore command with a related command.

<Command> is a related command that extends the appstore command. You can run the following related commands:
    list - Lists all applications in iTunes Connect that are in the Waiting for Upload state.
    upload - Builds the project and uploads the binary to iTunes Connect.
--[/]--

--[appstore|list]--
Usage:
    $ appbuilder appstore list <AppleID> [<Password>]

Lists all application records in iTunes Connect that are in the Waiting for Upload state. The list contains name, version, and
bundle ID for each application record.
<Apple ID> and <Password> are your credentials for logging in iTunes Connect. If you do not provide your Apple ID password when
        running the command, the Telerik AppBuilder CLI will prompt you to provide it.

When running $ appbuilder appstore upload, you need to provide the name for the application record.

--[/]--

--[appstore|upload]--
Usage:
    $ appbuilder appstore upload <Application Name> <AppleID> [<Password>]
                 --certificate <Certificate ID> --provision <Provision ID>

Builds the project and uploads the application to iTunes Connect.
<Application Name> is the name for an application record in the Waiting for Upload state. To retrieve the names of your application
        records that are in the Waiting for Upload state in iTunes Connect, run $ appbuilder appstore list.
<AppleID> and <Password> are your credentials for logging into iTunes Connect. If you do not provide your Apple ID password when
        running the command, Telerik AppBuilder will prompt you to provide it.
<Certificate ID> is the index or name of the certificate as listed by $ appbuilder certificate.
<Provision ID> is the index or name of the provisioning profile as listed by $ appbuilder provision.

Options:
    --certificate - Sets the certificate that you want to use for code signing your iOS app. You can set a certificate by index or name.
        You must specify a production certificate. The certificate must match the provisioning profile.
        To list available certificates, run $ appbuilder certificate.
    --provision - Sets the provisioning profile that you want to use for code signing your iOS app. You can set a provisioning profile
        by index or name.
        You must specify a provisioning profile for App Store distribution. The provisioning profile must match the certificate.
        To list available provisioning profiles, run $ appbuilder provision.
--[/]--

--[appmanager]--
Usage:
    $ appbuilder appmanager <Command>

You must run the appmanager command with a related command.

<Command> is a related command that extends the appmanager command. You can run the following related commands:
    upload - Builds the project and uploads the binary to Telerik AppManager.
--[/]--

--[appmanager|upload]--
Usage:
    $ appbuilder appmanager upload <Platform> [--certificate <Certificate ID>] [--provision <Provision ID>]

Platform-specific usage:
    $ appbuilder appmanager upload android --certificate <Certificate ID>
    $ appbuilder appmanager upload ios --certificate <Certificate ID> --provision <Provision ID>

Builds the project and uploads the application to Telerik AppManager. In this version of Telerik AppManager, you can upload and distribute only iOS and Android apps.

<Platform> is the target distribution platform. You can set ios or android.
<Certificate ID> is the index or name of the certificate as listed by $ appbuilder certificate.
<Provision ID> is the index or name of the provisioning profile as listed by $ appbuilder provision.

Options:
    --certificate - Sets the certificate that you want to use for code signing your iOS or Android app. You can set 
        a certificate by index or name.
        To list available certificates, run $ appbuilder certificate.
    --provision - Sets the provisioning profile that you want to use for code signing your iOS app. You can set
        a provisioning profile by index or name.
        To list available provisioning profiles, run $ appbuilder provision.
--[/]--

--[certificate-request]--
Usage:
    $ appbuilder certificate-request
    $ appbuilder certificate-request [<Command>]

Lists all pending certificate signing requests (.csr).

<Command> is a related command that extends the certificate-request command. You can run the following related commands:
    create - Creates a certificate signing request (.csr) which you can upload in the iOS Dev Center.
    remove - Removes a pending certificate signing request (.csr) from the server.
    download - Downloads a pending certificate signing request (.csr) which you can upload in the iOS Dev Center.
--[/]--

--[certificate-request|create]--
Usage:
    $ appbuilder certificate-request create [<Name> [<Email> [<Country>]]] [--save-to <File Path>]

Creates a certificate signing request (.csr) which you can upload in the iOS Dev Center.
If you do not provide values for <Name>, <Email> and <Country>, the Telerik AppBuilder CLI prompts you to complete the missing details.

Options:
    --save-to - If set, downloads the certificate request and saves it to the specified file path. The file path must be complete with
        file name and extension. If not specified, the certificate signing request is saved as certificate_request.csr.
--[/]--

--[certificate-request|remove]--
Usage:
    $ appbuilder certificate-request remove <Csr ID>

Removes a pending certificate signing request (.csr) from the server.
<Csr ID> is the index of the certificate signing request as listed by $ appbuilder certificate-request.
--[/]--

--[certificate-request|download]--
Usage:
    $ appbuilder certificate-request download <Csr ID> [--save-to <File Path>]

Downloads a pending certificate signing request (.csr) which you can upload in the iOS Dev Center. 
<Csr ID> is the index of the certificate signing request as listed by $ appbuilder certificate-request.

Options:
    --save-to - If set, downloads the certificate request and saves it to the specified file path. The file path must be complete with
        file name and extension. If not specified, the certificate signing request is saved as certificate_request.csr.
--[/]--

--[prop]--
Usage:
    $appbuilder prop <Command>

You must run the prop command with a related command.

<Command> is a related command that extends the prop command. You can run the following related commands:
    print - Prints the current project configuration or the value for the selected project property.
    add - Enables more options for the selected project property, if the property accepts multiple values.
    set - Sets the selected project property and overwrites its current value.
    remove - Disables options for the selected project property, if the property accepts multiple values.
--[/]--

--[prop|print]--
Usage:
    $ appbuilder prop print <PropertyName>

Shows the value for the selected project property.

#{projectPropertiesService.getProjectSchemaHelp}
--[/]--

--[prop|add]--
Usage:
    $ appbuilder prop add <Property Name> <Value> [Value]*

Enables more options for the selected project property, if the property accepts multiple values.
<Property Name> is the name of the project property as listed by $ appbuilder prop print.

#{projectPropertiesService.getProjectSchemaHelp}
--[/]--

--[prop|set]--
Usage:
    $ appbuilder prop set <Property Name> <Value> [Value]*

Sets the selected project property and overwrites its current value.
<Property Name> is the name of the project property as listed by $ appbuilder prop print.

#{projectPropertiesService.getProjectSchemaHelp}
--[/]--

--[prop|remove]--
Usage:
    $ appbuilder prop remove <Property Name> <Value> [Value]*

Disables options for the selected project property, if the property accepts multiple values.
<Property Name> is the name of the project property as listed by $ appbuilder prop print.

#{projectPropertiesService.getProjectSchemaHelp}
--[/]--

--[feature-usage-tracking]--
Usage:
    $appbuilder feature-usage-tracking [<Command>]

Configures anonymous usage statistics tracking for the Telerik AppBuilder command-line interface.
All data gathered is used strictly for improving the product and will never be used to identify or contact you.

<Command> is a related command that extends the feature-usage-tracking command. You can run the following related commands:
    status - Shows the current configuration for anonymous usage tracking for the
             Telerik AppBuilder command-line interface.
    enable - Enables anonymous usage statistics tracking. All data gathered is used strictly
             for improving the product and will never be used to identify or contact you.
    disable - Disables anonymous usage statistics tracking.
--[/]--
