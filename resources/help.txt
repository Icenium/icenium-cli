--[]--

Usage:
    $ appbuilder <command> [command parameters] [--command <options>]

General commands:
    help <command>                  Shows additional information about the commands in this list.
    login                           Logs you in Telerik Platform.
    logout                          Logs you out from Telerik Platform.
    user                            Prints information about the currently logged in user.

Project development commands:
    create                          Creates a new project from template.
    init                            Creates a project in the current folder.
    build                           Builds the project and produces a QR code for deploying the application package.
    deploy                          Deploys the project to a connected device.
    cloud-sync                      Synchronizes the project with the cloud to enable LiveSync for remote devices.
    live-sync                       Synchronizes the latest changes in your project to connected devices.
    simulate                        Runs the current project in the device simulator.
    find-plugins                    Searches for plugins in the Apache Cordova Plugin Registry by keyword.
    fetch-plugin                    Imports an Apache Cordova plugin into your project.
    edit-configuration              Opens configuration file for editing.
    prop-add                        Adds more values to a list project property.
    prop-set                        Sets a project property.
    prop-del                        Removes values from a list project property.
    prop-print                      Prints the value of a project property.
    list-projects                   Lists all projects of your account.
    export-project                  Exports one of your remote projects into a local AppBuilder project.

Device commands:
    list-devices                    Lists all recognized connected devices.
    open-device-log-stream          Opens the log stream for given device.

Certificate management and publishing commands:
    list-certificates               Lists all configured certificates for code signing
                                    iOS applications and Android applications.
    create-self-signed-certificate  Creates self signed certificate for code signing Android applications.
    remove-certificate              Removes certificate from the server.
    export-certificate              Exports certificate from the server.
    import-certificate              Imports certificate to the server.
    list-provisions                 Lists all configured provisioning profiles for code signing iOS applications.
    import-provision                Imports a provisioning profile from file.
    remove-provision                Removes a registered provisioning profile.
    appstore-list                   Lists all applications in iTunes Connect that are ready for upload.
    appstore-upload                 Builds the project and uploads the app to iTunes Connect.

Global Options:
    --help                Prints help about the command given in the rest of the command line.
    --path <path>         Specifies the file path to the project. If not specified, the project is searched for
                          in the current directory and all directories above it.
    --version             Prints the client's version and exits.

--[/]--

--[login]--

Usage:
    $ appbuilder login

Opens a new browser window in which you can provide your login credentials for Telerik Platform.
After you have authenticated with Telerik Platform, you can close the browser window and continue your work from the 
command line.

--[/]--

--[logout]--

Usage:
    $ appbuilder logout

Logs you out from Telerik Platform.
To build, deploy, or synchronize your projects with the cloud, you need to be logged in.

--[/]--

--[create]--

Usage:
    $ appbuilder create [<App name>] [--template <Template>] [--path <path>] [--appid <App ID>]

Creates a new project from template.
<App name> is the name of the application. The maximum length is 30 characters. You can use only the following characters:
    A-Z, a-z, 0-9, underscore (_), dot (.), plus (+), hyphen (-), at (@), dollar ($), ampersand (&), semi-colon (;),
    opening and closing brackets (()), and comma (,).

Options:
    --template <Template> - Sets the source template for the project. You can use the following templates: Blank,
        Friends, JQuery, KendoUI, or KendoUIDataViz. The default value is KendoUI.
    --path - Specifies the path where you want to create the project, if different from the current directory. 
        The directory must be empty.
        If not specified, ?Telerik AppBuilder CLI? attempts to create the project in the current directory. 
    --appid - Sets the application identifier for your app. The application identifier must consist of at least three
        alphanumeric strings, separated by a dot (.). Each string must start with a letter.
        The application identifier corresponds to the Bundle ID for iOS apps and to the package identifier for Android apps.
        If not specified, the application identifier will be set to com.telerik.<App name>

--[/]--

--[init]--

Usage:
    $ appbuilder init [--appid <App ID>]

Creates a project in the current folder. If the folder is an existing AppBuilder project (created from
the Visual Studio Extension or synced from GitHub) the project retains the existing project configuration.

Options:
    --appid - Sets the application identifier for your app. The application identifier must consist of at least three
        alphanumeric strings, separated by a dot (.). Each string must start with a letter.
        The application identifier corresponds to the Bundle ID for iOS apps and to the package identifier for Android apps.
        If not specified, the application identifier will be set to com.telerik.<App name>

--[/]--

--[list-devices]--
Usage:
    $ appbuilder list-devices [<Platform>] [--timeout  <Milliseconds>]

Platform-specific examples:
    $ appbuilder list-devices android
    $ appbuilder list-devices ios

Options:
	--timeout - Sets the time in milliseconds for the operation to search for connected devices before completing.
	The operation will continue to wait and listen for newly connected devices and will list them
	after the specified time expires. If not set, the default value is 4000.

Lists with serial number and index all recognized connected devices, grouped by platform.

If a connected Android device is not shown in the list, make sure that you have the Android USB drivers
installed and that USB debugging is enabled on the device.

--[/]--

--[build]--
Usage:
    $ appbuilder build <Platform> [--download] [--no-livesync]

Platform-specific examples:
    $ appbuilder build android
    $ appbuilder build ios [--certificate <index or name>] [--provision <index or name>] [--companion]

Builds the project for the target platform and produces a QR code for deployment.

Run list-certificates to list available certificates for code signing iOS applications. You can specify a certificate
by index or name.
Run list-provisions to list available provisioning profiles for code signing iOS applications. You can specify a 
provisioning profile by index or name.

You cannot specify both the --companion and --download options.

Options:
    --download - If specified, downloads the application package to the .ab directory in the project directory, instead
        of producing a QR code. Set this option when you want to manually deploy the app package later.
    --companion - Produces a QR code for deployment in the Telerik AppBuilder companion app. When deploying to the
        companion app, you don't need to specify a certificate or provision.
    --certificate - Required when building for iOS unless the --companion switch is specified.
        Sets the certificate that you want to use for code signing your iOS app. Must match the specified
        provisioning profile. You can specify a certificate by index or name.
    --provision - Required when building for iOS unless the --companion switch is specified. Sets the provisioning
        profile that you want to use for code signing your iOS app. Must match the specified certificate. You can
        specify a provisioning profile by index or name.
    --no-livesync - If specified, the app will not support the three-finger tap (iOS) or menu button press (Android)
        to sync with the cloud.

--[/]--

--[import-provision]--
Usage:
    $ appbuilder import-provision <File>

Imports the provisioning profile stored in <File>.
--[/]--

--[remove-provision]--
Usage:
    $ appbuilder remove-provision <Name or #Index>

Removes the registered provisioning profile specified by its name or index. Use the `list-provisions`
command to see a list of registered provisioning profiles.
--[/]--

--[cloud-sync]--
Usage:
    $ appbuilder cloud-sync

Synchronizes the project with the cloud to enable LiveSync for remote devices. 

To get the latest changes on an iOS device, tap and hold with three fingers on the device until the download pop-up
appears.
To get the latest changes on an Android device, press the Menu button.
--[/]--

--[deploy]--
Usage:
    $ appbuilder deploy <Platform>

Platform-specific examples:
    $ appbuilder deploy android [--device <id>]
    $ appbuilder deploy ios --certificate <id or name> --provision <id or name>

Builds the project for the specified platform and deploys it to a connected device.

Run list-certificates to list available certificates for code signing iOS applications. You can specify a certificate
by index or name.
Run list-provisions to list available provisioning profiles for code signing iOS applications. You can specify a 
provisioning profile by index or name.

Options:
    --device - Specifies the serial number or the index of the connected device on which you want to deploy the app.
        Run list-devices to list all connected devices, grouped by platform.
    --certificate - Required when building for iOS. Sets the certificate that you want to use for code signing your iOS
        app. Must match the specified provisioning profile. You can specify a certificate by index or name.
    --provision - Required when building for iOS. Sets the provisioning profile that you want to use for code signing
        your iOS app. Must match the specified certificate. You can specify a provisioning profile by index or name.

--[/]--

--[live-sync]--
Usage:
    $ appbuilder live-sync [<Platform>]

Platform-specific example:
    $ appbuilder live-sync android [--device <id>] [--watch]
    $ appbuilder live-sync ios [--device <id>] [--watch]

Synchronizes the latest changes in your project to connected devices.

Options:
    --watch - Enables Project LiveSync. When you save changes to the project, changes will be automatically synchronized
        to the connected device.
    --device - Specifies the serial number or the index of the connected device to which you want to synchronize changes. 
        Run list-devices to list all connected devices, grouped by platform.

--[/]--

--[open-device-log-stream]--
Usage:
	$ appbuilder open-device-log-stream [--device <id>]

You can choose which device's log stream to open by specifying its index or identifier.
Run '$ appbuilder list-devices' command to see all connected devices.
--[/]--

--[find-plugins]--
Usage:
    $ appbuilder find-plugins [<keyword> [ <keyword>]*>]

Searches by keyword for plugins in the Apache Cordova Plugin Registry.
--[/]--

--[fetch-plugin]--
Usage:
    $ appbuilder fetch-plugin <name | path | URL> | [<keyword> [ <keyword>]*>]

Imports the specified Apache Cordova plugin into your project. You can specify a plugin by local path,
URL to a plugin repository, or a name of a plugin published in the Apache Cordova Plugin Registry. 
The plugin must be Plugman-compatible.
--[/]--

--[simulate]--
Usage:
    $ appbuilder simulate

Runs the current project in the device simulator.

Options:
    --path <path> - Specifies the path to the project. If not specified, the project is searched
                    for in the current directory and all directories above it.

--[/]--

--[list-projects]--
Usage:
    $ appbuilder list-projects

Lists all projects of your account.

--[/]--

--[export-project]--
Usage:
    $ appbuilder export-project <ProjectIndex> | <ProjectName>

Exports one of your remote projects into a local AppBuilder project.
You can choose which project to export by specifying its index or name.
All projects and their indexes can be seen by running "$ appbuilder list-projects".

Options:
    --path <path> - Specifies the local path where the chosen project will be exported.

--[/]--

--[edit-configuration]--
Usage:
    $ appbuilder edit-configuration <ConfigurationFile>

<ConfigurationFile> can be one of the following: "android-manifest", "android-config", "ios-info" and "ios-config".
Opens the given file for editing and creates it in your project directory if it didn't already exist.

--[/]--

--[user]--
Usage:
	$ appbuilder user

Prints information about the currently logged in user and details about their license.
--[/]--

--[list-provisions]--
Usage:
    $ appbuilder list-provisions

Lists with indexes and names all configured provisioning profiles for code signing iOS applications. When building an app,
you can set the provisioning profile by index or name in the --provision option.
--[/]--

--[list-certificates]--
Usage:
    $ appbuilder list-certificates

Lists with indexes and names all configured certificates for code signing iOS and Android applications. When building an app, you can
set the certificate by index or name in the --certificate option.
--[/]--

--[create-self-signed-certificate]--
Usage:
    $ appbuilder create-self-signed-certificate [<Name> [<Email> [<Country> [<Purpose> [<StartDate> [<EndDate>]]]]]]

With a certificate, you can build your app and run it on device.
Depending on the certificate, you can install your app for testing or you can publish it in Google Play.
If you want to publish your app in Google Play, verify that the certificate expires after October 22, 2033.
<Purpose> can be 'Generic' or 'GooglePlay'.
<StartDate> and <EndDate> must have the following format: yyyy-mm-dd.

If you omit any of the parameters to the command then an interactive prompt will be shown prompting you to
enter the rest of the details of the certificate.
--[/]--

--[remove-certificate]--
Usage:
    $ appbuilder remove-certificate <Name or index>

Remove a certificate from the server by its <Name>. To see the available <Name>s run list-certificates.
Deleting a certificate cannot be undone.
Unless you have a backup of the certificate, you will not be able to restore it and update apps already signed and published with it.
--[/]--

--[export-certificate]--
Usage:
    $ appbuilder export-certificate <Name or index> [<Password>]

Export a certificate from the server by its <Name>. To see the available <Name>s run list-certificate.
You will also have to set a password for the exported certificate.

You will be prompted to enter a password, if you don't specify it on the command line.

Options:
    --path <path> - Specifies the target path. The default path is the current working directory.
--[/]--

--[import-certificate]--
Usage:
    $ appbuilder import-certificate <CertificateFile> [<Password>]

To add a certificate to the list, import a P12 file that contains an existing certificate or do one of the following:
* create a self-signed certificate
* create and complete a pending certificate signing request by importing the matching CER file you created in the iOS Dev Center

You will be prompted to enter a password, if you don't specify it on the command line.
--[/]--

--[appstore-list]--
Usage:
    $ appbuilder appstore-list <AppleID> [<Password>]

Prints a list of all applications that are ready for upload in iTunes Connect.
<AppleID> and <Password> are your credentials for logging into iTunes Connect.

The list shows the name, version and application bundle ID of each application.
The name of an application is passed as the <Application Name> parameter of
the `appstore-upload` command.

You will be prompted to enter a password, if you don't specify it on the command line.
--[/]--

--[appstore-upload]--
Usage:
    $ appbuilder appstore-upload <Application Name> <AppleID> [<Password>]
                 --certificate <index or name> --provision <index or name>

Builds the project and uploads the application to iTunes Connect.
<Application Name> is the name of the application which you are uploading. The exact name can be taken
from the list printed with the `appstore-list` command.
<AppleID> and <Password> are your credentials for logging into iTunes Connect.

You can see a list of registered certificated using the `list-certificates` command.
You can see a list of registered provisions using the `list-provisions` command.

You will be prompted to enter a password, if you don't specify it on the command line.

Options:
    --certificate - Sets the certificate that you want to use for code signing your iOS
        app. Must match the specified provisioning profile. You can specify a certificate by index or name.
    --provision - Sets the provisioning profile that you want to use for code signing
        your iOS app. Must match the specified certificate. You can specify a provisioning profile by index or name.
        The provisioning profile must be selected such that it can be used to sign apps for publishing to AppStore.
--[/]--

--[create-certificate-request]--
Usage:
    $ appbuilder create-certificate-request [<Name> [<Email> [<Country>]]] [--save-to <File>]

Create a certificate signing request (.csr). <Name>, <Email> and <Country> are written into the request
and will be used to create the actual certificate. If any of these parameters is not provided, an
interactive prompt will let you enter this data.

Options:
    --save-to <File> - save the certificate request to the given file. If not specified, a default name will be chosen.
--[/]--

--[list-certificate-requests]--
Usage:
    $ appbuilder list-certificate-requests

Lists all pending certificate signing requests.
--[/]--

--[remove-certificate-request]--
Usage:
    $ appbuilder remove-certificate-request <Index>

Removes a pending certificate signing request. Get the <Index> from the `list-certificate-requests` command.
--[/]--

--[download-certificate-request]--
Usage:
    $ appbuilder download-certificate-request <Index> [--save-to <File>]

Downloads a certificate signing request. Get the <Index> from the `list-certificate-requests` command.

Options:
    --save-to <File> - save the certificate request to the given file. If not specified, a default name will be chosen.
--[/]--


--[prop-add]--
Usage:
    $ appbuilder prop-add <PropertyName> <value> [value]*

Adds the specified value or list of values to the list property named <PropertyName>.

#{project.getProjectSchemaHelp}
--[/]--

--[prop-set]--
Usage:
    $ appbuilder prop-set <PropertyName> <value> [value]*

Sets the project property named <PropertyName> to the specified value or list of values.

#{project.getProjectSchemaHelp}
--[/]--

--[prop-del]--
Usage:
    $ appbuilder prop-del <PropertyName> <value> [value]*

Removes the given value or list of values from the list property named <PropertyName>.

#{project.getProjectSchemaHelp}
--[/]--

--[prop-print]--
Usage:
    $ appbuilder prop-print <PropertyName>

Prints the value of <PropertyName> for the current project.

#{project.getProjectSchemaHelp}
--[/]--
