--[]--

Usage:
    $ appbuilder <command> [command parameters] [--command <options>]

General commands:
    help <command>                  Shows additional information about the commands in this list.
    login                           Logs you in to the Telerik Platform.
    logout                          Logs you out from the Telerik Platform.
    user                            Prints information about the currently logged in user.

Project development commands:
    create                          Creates a new project from template.
    init                            Initializes an existing project for development.
    build                           Builds the project and produces a QR code for deploying the application package.
    deploy                          Builds and deploys the project to a connected device.
    cloud-sync                      Synchronizes the project with the cloud to enable LiveSync for remote devices.
    livesync                        Synchronizes the latest changes in your project to connected devices.
    simulate                        Runs the current project in the device simulator.
    find-plugins                    Searches for plugins in the Apache Cordova Plugin Registry by keyword.
    fetch-plugin                    Imports an Apache Cordova plugin into your project.
    edit-configuration              Opens a configuration file for editing.
    prop-add                        Enables more options for the selected project property, if the property accepts multiple values.
    prop-set                        Sets a project property.
    prop-remove                     Disables options for the selected project property, if the property accepts multiple values.
    prop-print                      Shows the value of the selected project property.
    list-projects                   Lists all projects associated with your Telerik Platform account.
    export-project                  Exports a selected project from the cloud and initializes it for development.

Device commands:
    list-devices                    Lists all recognized connected devices.
    open-device-log-stream          Opens the log stream for the selected device.

Certificate management and publishing commands:
    list-certificates               Lists all configured certificates for code signing
                                    iOS and Android applications.
    create-self-signed-certificate  Creates self-signed certificate for code signing Android applications.
    remove-certificate              Removes the selected certificate from the server.
    export-certificate              Exports the selected certificate from the server on your file system.
    import-certificate              Imports a certificate from your file system to the server.
    list-provisions                 Lists all configured provisioning profiles for code signing iOS applications.
    import-provision                Imports a provisioning profile from file.
    remove-provision                Removes a registered provisioning profile.
    appstore-list                   Lists all applications in iTunes Connect that are in the Waiting for Upload state.
    appstore-upload                 Builds the project and uploads the binary to iTunes Connect.

Global Options:
    --help                Prints help about the selected command.
    --path <path>         Specifies the file path to the project. If not set, the project is searched for
                          in the current directory and all directories above it.
    --version             Prints the client version and exits.

--[/]--

--[login]--

Usage:
    $ appbuilder login

Opens a new browser window in which you can provide your login credentials for the Telerik Platform.
After you have authenticated with Telerik Platform, you can close the browser window and continue your work from the 
command line.

--[/]--

--[logout]--

Usage:
    $ appbuilder logout

Logs you out from the Telerik Platform.
To build, deploy, or synchronize your projects with the cloud, you need to be logged in.

--[/]--

--[create]--

Usage:
    $ appbuilder create <App name> [--template <Template>] [--path <path>] [--appid <App ID>]

Creates a new project from template.
<App name> is the name of the application. The maximum length is 30 characters. You can use only the following characters:
    A-Z, a-z, 0-9, underscore (_), dot (.), plus (+), hyphen (-), at (@), dollar ($), ampersand (&), semi-colon (;),
    opening and closing brackets (()), and comma (,).

Options:
    --template <Template> - Sets the source template for the project. You can use the following templates:
        #{templatesService.projectTemplatesString}. The default value is KendoUI.
    --path - Specifies the path where you want to create the project, if different from the current directory. 
        The directory must be empty.
    --appid - Sets the application identifier for your app. The application identifier must consist of at least three
        alphanumeric strings, separated by a dot (.). Each string must start with a letter.
        The application identifier corresponds to the Bundle ID for iOS apps and to the package identifier for Android apps.
        If not specified, the application identifier is set to com.telerik.<App name>.

--[/]--

--[init]--

Usage:
    $ appbuilder init [--appid <App ID>]

Initializes an existing project for development in the current directory. If the folder contains an existing AppBuilder project (created with
the Telerik AppBuilder extension for Visual Studio or synchronized from GitHub), the project retains the existing project configuration.

Options:
    --appid - Sets the application identifier for your app. The application identifier must consist of at least three
        alphanumeric strings, separated by a dot (.). Each string must start with a letter.
        The application identifier corresponds to the Bundle ID for iOS apps and to the package identifier for Android apps.
        If not specified, the application identifier is set to com.telerik.<current directory name>.

--[/]--

--[list-devices]--
Usage:
    $ appbuilder list-devices [<Platform>] [--timeout  <Milliseconds>]

Platform-specific examples:
    $ appbuilder list-devices android
    $ appbuilder list-devices ios

Options:
   --timeout - Sets the time in milliseconds for the operation to search for connected devices before completing.
      The operation will continue to wait and listen for newly connected devices and will list them
      after the specified time expires. If not set, the default value is 4000.

Lists all recognized connected devices with serial number and index, grouped by platform.

If a connected Android device is not shown in the list, make sure that you have installed the Android USB drivers on your system
and that USB debugging is enabled on the device.

--[/]--

--[build]--
Usage:
    $ appbuilder build <Platform> [--download] [--no-livesync]

Platform-specific examples:
    $ appbuilder build android [--companion]
    $ appbuilder build ios [--certificate <index or name>] [--provision <index or name>] [--companion]
    $ appbuilder build wp8

Builds the project for the target platform and produces a QR code for deployment.

Run list-certificates to list available certificates for code signing iOS applications. You can specify a certificate
by index or name.
Run list-provisions to list available provisioning profiles for code signing iOS applications. You can specify a 
provisioning profile by index or name.

You cannot specify both the --companion and --download options.

When building for Windows Phone 8, the built package is always downloaded, because deployment
through a QR code is not supported.

Options:
    --download - If set, downloads the application package to the .ab directory in the current directory, instead
        of producing a QR code. Set this option if you want to manually deploy the app package later.
    --companion - Produces a QR code for deployment in the Telerik AppBuilder companion app. When deploying to the
        companion app, you do not need to set a certificate or provision.
    --certificate - Required when building for iOS unless the --companion switch is specified.
        Sets the certificate that you want to use for code signing your iOS app. Must match the selected
        provisioning profile. You can set a certificate by index or name.
    --provision - Required when building for iOS unless the --companion switch is set. 
        Sets the provisioning profile that you want to use for code signing your iOS app. Must match the selected 
        certificate. You can set a provisioning profile by index or name.
    --no-livesync - If set, disables LiveSync of code changes with the three-finger tap and hold gesture.
    --save-to - If set, downloads the application package to the provided path instead of the .ab directory. Use full 
        path including fileName and extension.

--[/]--

--[import-provision]--
Usage:
    $ appbuilder import-provision <File>

Imports the provisioning profile stored in the selected file.
--[/]--

--[remove-provision]--
Usage:
    $ appbuilder remove-provision <Name or #Index>

Removes the registered provisioning profile selected by its name or index. Use the `list-provisions`
command to see a list of registered provisioning profiles.
--[/]--

--[cloud-sync]--
Usage:
    $ appbuilder cloud-sync

Synchronizes the project with the cloud to enable LiveSync via wireless connection. 

To get the latest changes on device, tap and hold with three fingers on the device screen until the download pop-up
appears. When the download completes, the app refreshes automatically.
--[/]--

--[deploy]--
Usage:
    $ appbuilder deploy <Platform>

Platform-specific examples:
    $ appbuilder deploy android [--device <ID>]
    $ appbuilder deploy ios --certificate <Name or ID> --provision <Name or ID>

Builds the project for the selected platform and deploys it to a connected device.

Run list-certificates to list available certificates for code signing iOS applications. You can specify a certificate
by index or name.
Run list-provisions to list available provisioning profiles for code signing iOS applications. You can specify a 
provisioning profile by index or name.

Options:
    --device - Specifies the serial number or the index of the connected device on which you want to deploy the app.
        Run list-devices to list all connected devices, grouped by platform.
    --certificate - Required when building for iOS. Sets the certificate that you want to use for code signing your iOS
        app. Must match the selected provisioning profile. You can set a certificate by index or name.
    --provision - Required when building for iOS. Sets the provisioning profile that you want to use for code signing
        your iOS app. Must match the selected certificate. You can set a provisioning profile by index or name.

--[/]--

--[livesync]--
Usage:
    $ appbuilder livesync [<Platform>] [--device <id>] [--companion] [--watch]

Platform-specific example:
    $ appbuilder livesync android
    $ appbuilder livesync ios

Synchronizes the latest changes in your project to connected devices.

Options:
    --watch - When you save changes to the project, changes are automatically synchronized
        to the connected device.
    --device - Specifies the serial number or the index of the connected device to which you want to synchronize changes. 
        Run list-devices to list all connected devices, grouped by platform.
    --companion - When you save changes to the project, changes are automatically synchronized
        to the Telerik AppBuilder companion app.

--[/]--

--[open-device-log-stream]--
Usage:
    $ appbuilder open-device-log-stream [--device <id>]

Opens the device log stream for a selected device. You can select a device by index or identifier.
Run list-devices to list all connected devices, grouped by platform.
--[/]--

--[find-plugins]--
Usage:
    $ appbuilder find-plugins [<keyword> [ <keyword>]*>]

Searches by keyword for plugins in the Apache Cordova Plugin Registry.
--[/]--

--[fetch-plugin]--
Usage:
    $ appbuilder fetch-plugin <name | path | URL> | [<keyword> [ <keyword>]*>]

Imports the selected Apache Cordova plugin into your project. You can specify a plugin by local path,
URL to a plugin repository, or a name of a plugin published in the Apache Cordova Plugin Registry. 
The plugin must be Plugman-compatible.
--[/]--

--[simulate]--
Usage:
    $ appbuilder simulate

Runs the current project in the device simulator.

Options:
    --path <path> - Specifies the path to the project. If not specified, the project is searched
                    for in the current directory and all directories above it.

--[/]--

--[list-projects]--
Usage:
    $ appbuilder list-projects

Lists all projects associated with your Telerik Platform account.

--[/]--

--[export-project]--
Usage:
    $ appbuilder export-project <ProjectIndex> | <ProjectName>

Exports one of your projects from the cloud and initializes it for development
in the current directory.
You can choose which project to export by its index or name.
Run list-projects to list all projects associated with your Telerik Platform account.

Options:
    --path <path> - Specifies where to export the selected project on your file system. If not set,
                    exports the project in the current directory.

--[/]--

--[edit-configuration]--
Usage:
    $ appbuilder edit-configuration <ConfigurationFile>

<ConfigurationFile> is the configuration file that you want to open. You can select a configuration file
    for editing by setting any of the following values.
#{templatesService.configurationFilesString}

--[/]--

--[user]--
Usage:
    $ appbuilder user

Prints information about the currently logged in user and details about their license.
--[/]--

--[list-provisions]--
Usage:
    $ appbuilder list-provisions [-v]

Lists all configured provisioning profiles for code signing iOS applications with index and name. When building an app,
you can set the provisioning profile by index or name in the --provision option.

Options:
    -v, --verbose - Lists the devices included in the selected provisioning profile.

--[/]--

--[list-certificates]--
Usage:
    $ appbuilder list-certificates

Lists all configured certificates for code signing iOS and Android applications with index and name. When building an app, you can
set the certificate by index or name in the --certificate option.
--[/]--

--[create-self-signed-certificate]--
Usage:
    $ appbuilder create-self-signed-certificate [<Name> [<Email> [<Country> [<Purpose> [<StartDate> [<EndDate>]]]]]]

Creates a self-signed certificate for code signing Android applications.

Depending on the certificate type, you can install your app for testing or you can publish it in Google Play.
If you want to publish your app in Google Play, verify that the certificate expires after October 22, 2033.

<Purpose> is the type of the certificate that you want to create. You can set the following purposes: Generic or GooglePlay.
<StartDate> and <EndDate> set the validity of the certificate. You must set the start and end date in the
        following format: yyyy-mm-dd. 
        If you want to publish your app in Google Play, verify that the end date is greater than 2033-10-22.

If you do not provide one or more command parameters, an Telerik AppBuilder shows an interactive prompt to let you set the remaining
certificate details.
--[/]--

--[remove-certificate]--
Usage:
    $ appbuilder remove-certificate <Name or index>

Removes a selected certificate from the server. 

Run list-certificates to list all available certificates with name and index.
CAUTION: Deleting a certificate cannot be undone. If you have not backed up the certificate, you will not be able to restore it. You will
    not be able to update any apps that you have signed and published with the certificate.
--[/]--

--[export-certificate]--
Usage:
    $ appbuilder export-certificate <Name or index> [<Password>]

Exports a selected certificate from the server as a P12 file. You must set a password for the exported file. If you do not set a password,
Telerik AppBuilder will prompt you to provide a password.

Run list-certificates to list all available certificates for code signing iOS and Android applications.

Options:
    --path <path> - Specifies where to store the exported certificate. If not specified, stores the exported certificate in the current 
            directory.
--[/]--

--[import-certificate]--
Usage:
    $ appbuilder import-certificate <CertificateFile> [<Password>]

Imports an existing certificate from a P12 file stored on your local file system. If you do not provide the certificate password when
running the command, Telerik AppBuilder will prompt you to provide it.
--[/]--

--[appstore-list]--
Usage:
    $ appbuilder appstore-list <AppleID> [<Password>]

Lists all application records in iTunes Connect that are in the Waiting for Upload state. The list contains name, version, and
bundle ID for each application record.
<AppleID> and <Password> are your credentials for logging into iTunes Connect. If you do not provide your Apple ID password when
        running the command, Telerik AppBuilder will prompt you to provide it.

When running appstore-upload, you need to provide the name for the application record.

--[/]--

--[appstore-upload]--
Usage:
    $ appbuilder appstore-upload <Application Name> <AppleID> [<Password>]
                 --certificate <index or name> --provision <index or name>

Builds the project and uploads the application to iTunes Connect.
<Application Name> is the name for an application record in the Waiting for Upload state. Run appstore-list to retrieve the names of your application
records that are in the Waiting for Upload state in iTunes Connect.
<AppleID> and <Password> are your credentials for logging into iTunes Connect. If you do not provide your Apple ID password when
        running the command, Telerik AppBuilder will prompt you to provide it.

Run list-certificates to list all available certificates for code signing your apps.
Run list-provisions to list all available provisioning profiles for code signing your apps.

Options:
    --certificate - Sets the certificate that you want to use for code signing your iOS
        app. Must be a production certificate and must match the specified provisioning profile.
        You can specify a certificate by index or name.
    --provision - Sets the provisioning profile that you want to use for code signing
        your iOS app. Must be an AppStore distribution certificate and must match the specified certificate.
        You can specify a provisioning profile by index or name.
--[/]--

--[create-certificate-request]--
Usage:
    $ appbuilder create-certificate-request [<Name> [<Email> [<Country>]]] [--save-to <File>]

Creates a certificate signing request (.csr) which you can upload in the iOS Dev Center.
If you do not provide values for <Name>, <Email> and <Country>, Telerik AppBuilder will prompt you to complete the missing details.

Options:
    --save-to <File> - Saves the certificate request to the selected file. If not specified, the certificate signing request is saved as
            certificate_request.csr.
--[/]--

--[list-certificate-requests]--
Usage:
    $ appbuilder list-certificate-requests

Lists all pending certificate signing requests.
--[/]--

--[remove-certificate-request]--
Usage:
    $ appbuilder remove-certificate-request <Index>

Removes a pending certificate signing request. 

Run list-certificate-requests to list all pending certificate signing requests.
--[/]--

--[download-certificate-request]--
Usage:
    $ appbuilder download-certificate-request <Index> [--save-to <File>]

Downloads a pending certificate signing request (.csr) which you can upload in the iOS Dev Center. 

Run list-certificate-requests to list all pending certificate signing requests. 
Options:
    --save-to <File> - Saves the certificate request to the selected file. If not specified, the certificate signing request is saved as
            certificate_request.csr.
--[/]--


--[prop-add]--
Usage:
    $ appbuilder prop-add <PropertyName> <value> [value]*

Enables more options for the selected project property, if the property accepts multiple values.

#{project.getProjectSchemaHelp}
--[/]--

--[prop-set]--
Usage:
    $ appbuilder prop-set <PropertyName> <value> [value]*

Configures a project property.

#{project.getProjectSchemaHelp}
--[/]--

--[prop-remove]--
Usage:
    $ appbuilder prop-remove <PropertyName> <value> [value]*

Disables an option for the selected project property, if the property accepts multiple values.

Alias: prop-rm

#{project.getProjectSchemaHelp}
--[/]--

--[prop-print]--
Usage:
    $ appbuilder prop-print <PropertyName>

Shows the value for the selected project property.

#{project.getProjectSchemaHelp}
--[/]--
