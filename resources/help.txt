--[]--

Usage:
    $ ice <command> [command parameters] [--command options] [--path <path>]

Commands:
    help <command>        Shows additional information about the commands in this list.
    login                 Logs you in Telerik Platform.
    logout                Logs you out from Telerik Platform
    create                Creates a new project from template.
    list-provisions       Lists all configured provisioning profiles for code signing iOS applications.
    list-certificates     Lists all configured certificates for code signing iOS applications.
    list-devices          Lists all recognized connected devices.
    build                 Builds the project and produces a QR code for deploying the application package.
    ion                   Produces a QR code for deployment in the Telerik AppBuilder companion app.
    deploy                Deploys the project to a connected device.
    update                Synchronizes the project with the cloud to enable LiveSync for remote devices.
    sync                  Synchronizes the latest changes in your project to connected devices.
    find-plugins          Searches for plugins in the Apache Cordova Plugin Registry by keyword.
    fetch-plugin          Imports an Apache Cordova plugin into your project.
    simulate              Runs the current project in the device simulator.
    list-projects         Lists all projects of your account.
    export-project        Exports one of your remote projects into a local ice project.
    edit-configuration    Opens configuration file for editing.

Global Options:
    --path <path>         Specifies the file path to the project. If not specified, ?AppBuilder CLI? searches for the
                          project in the current directory and all directories above it.

--[/]--

--[login]--

Usage:
    $ ice login

Opens a new browser window in which you can provide your login credentials for Telerik Platform.
After you have authenticated with Telerik Platform, you can close the browser window and continue your work from the 
command line.

--[/]--

--[logout]--

Usage:
    $ ice logout

Logs you out from Telerik Platform.
To build, deploy, or synchronize your projects with the cloud, you need to be logged in.

--[/]--

--[create]--

Usage:
    $ ice create [<App name>] [--template <Template>] [--path <path>] [--appid <App ID>]

Creates a new project from template.
<App name> is the name of the application. The maximum length is 30 characters. You can use only the following characters:
    A-Z, a-z, 0-9, underscore (_), dot (.), plus (+), hyphen (-), at (@), dollar ($), ampersand (&), semi-colon (;),
    opening and closing brackets (()), and comma (,).

Options:
    --template <Template> - Sets the source template for the project. You can use the following templates: Blank,
        Everlive, JQuery, KendoUI, or KendoUIDataViz. The default value is KendoUI.
    --path - Specifies the path where you want to create the project, if different from the current directory. 
        The directory must be empty.
        If not specified, ?Icenium CLI? attempts to create the project in the current directory. 
    --appid - Sets the application identifier for your app. The application identifier must consist of at least three
        alphanumeric strings, separated by a dot (.). Each string must start with a letter.
        The application identifier corresponds to the Bundle ID for iOS apps and to the package identifier for Android apps.
        If not specified, ?AppBuilder CLI? sets the application identifier to com.telerik.<App name>

--[/]--

--[list-provisions]--
Usage:
    $ ice list-provisions

Lists with indexes and names all configured provisioning profiles for code signing iOS applications. When building an app,
you can set the provisioning profile by index or name in the --provision option.
--[/]--

--[list-certificates]--
Usage:
    $ ice list-certificates

Lists with indexes and names all configured certificates for code signing iOS applications. When building an app, you can
set the certificate by index or name in the --certificate option.
--[/]--

--[list-devices]--
Usage:
    $ ice list-devices [<Platform>]

Platform-specific examples:
    $ ice list-devices android
    $ ice list-devices ios

Lists with serial number and index all recognized connected devices, grouped by platform.

--[/]--

--[build]--
Usage:
    $ ice build <Platform> [--download]

Platform-specific examples:
    $ ice build android
    $ ice build ios --certificate <index or name> --provision <index or name>

Builds the project for the target platform and produces a QR code for deployment.

Run list-certificates to list available certificates for code signing iOS applications. You can specify a certificate
by index or name.
Run list-provisions to list available provisioning profiles for code signing iOS applications. You can specify a 
provisioning profile by index or name.

Options:
    --download - If specified, downloads the application package to the .ice directory in the project directory, instead
        of producing a QR code. Set this option when you build with provisioning profile and certificate for iOS 
        development.
    --certificate - Required when building for iOS. Sets the certificate that you want to use for code signing your iOS
        app. Must match the specified provisioning profile. You can specify a certificate by index or name.
    --provision - Required when building for iOS. Sets the provisioning profile that you want to use for code signing
        your iOS app. Must match the specified certificate. You can specify a provisioning profile by index or name.

--[/]--

--[ion]--
Usage:
    $ ice ion

Produces a QR code for deployment in the Telerik AppBuilder companion app.
--[/]--

--[update]--
Usage:
    $ ice update

Synchronizes the project with the cloud to enable LiveSync for remote devices. 

To get the latest changes on an iOS device, tap and hold with three fingers on the device until the download pop-up
appears.
To get the latest changes on an Android device, press the Menu button.
--[/]--

--[deploy]--
Usage:
    $ ice deploy <Platform>

Platform-specific examples:
    $ ice deploy android [--device <id>]
    $ ice deploy ios --certificate <id or name> --provision <id or name>

Builds the project for the specified platform and deploys it to a connected device.

Run list-certificates to list available certificates for code signing iOS applications. You can specify a certificate
by index or name.
Run list-provisions to list available provisioning profiles for code signing iOS applications. You can specify a 
provisioning profile by index or name.

Options:
    --device - Specifies the serial number or the index of the connected device on which you want to deploy the app. 
        Run list-devices to list all connected devices, grouped by platform.
    --certificate - Required when building for iOS. Sets the certificate that you want to use for code signing your iOS
        app. Must match the specified provisioning profile. You can specify a certificate by index or name.
    --provision - Required when building for iOS. Sets the provisioning profile that you want to use for code signing
        your iOS app. Must match the specified certificate. You can specify a provisioning profile by index or name.

--[/]--

--[sync]--
usage:
    $ ice sync [<Platform>]

Platform-specific example:
    $ ice sync android [--device <id>] [--live]
    $ ice sync ios [--device <id>] [--live]

Synchronizes the latest changes in your project to connected devices.

Options:
    --live - Enables Project LiveSync. When you save changes to the project, changes will be automatically synchronized 
        to the connected device.
    --device - Specifies the serial number or the index of the connected device to which you want to synchronize changes. 
        Run list-devices to list all connected devices, grouped by platform.

--[/]--

--[find-plugins]--
Usage:
    $ ice find-plugins [<keyword> [ <keyword>]*>]

Searches by keyword for plugins in the Apache Cordova Plugin Registry.
--[/]--

--[fetch-plugin]--
Usage:
    $ ice fetch-plugin <name | path | URL> | [<keyword> [ <keyword>]*>]

Imports the specified Apache Cordova plugin into your project. You can specify a plugin by local path,
URL to a plugin repository, or a name of a plugin published in the Apache Cordova Plugin Registry. 
The plugin must be Plugman-compatible.
--[/]--

--[simulate]--
Usage:
    $ ice simulate

Runs the current project in the device simulator.

Options:
    --path <path> - Specifies the path to the project. If not specified, the project is searched
                    for in the current directory and all directories above it.

--[/]--

--[list-projects]--
Usage:
    $ ice list-projects

Lists all projects of your account.

--[/]--

--[export-project]--
Usage:
    $ ice export-project <ProjectIndex> | <ProjectName>

Exports one of your remote projects into a local ice project.
You can choose which project to export by specifying its index or name.
All projects and their indexes can be seen by running "$ ice list-projects".

Options:
    --path <path> - Specifies the local path where the chosen project will be exported.

--[/]--

--[edit-configuration]--
Usage:
    $ ice edit-configuration <ConfigurationFile>

<ConfigurationFile> can be one of the following: "android-manifest", "android-config", "ios-info" and "ios-config".
Opens the given file for editing and creates it in your project directory if it didn't already exist.

--[/]--
